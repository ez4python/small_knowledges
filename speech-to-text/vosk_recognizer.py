import os
import wave
import json
import subprocess
from vosk import Model, KaldiRecognizer

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
MP3_INPUT_DIR = os.path.join(BASE_DIR, "mp3")
WAV_OUTPUT_DIR = os.path.join(BASE_DIR, "wav")
TXT_OUTPUT_DIR = os.path.join(BASE_DIR, "txt")
MODEL_PATH = os.path.join(BASE_DIR, "small_model")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{MODEL_PATH}'")

# –ó–∞–≥—Ä—É–∂–∞–µ–º Vosk-–º–æ–¥–µ–ª—å
model = Model(MODEL_PATH)

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
os.makedirs(MP3_INPUT_DIR, exist_ok=True)
os.makedirs(WAV_OUTPUT_DIR, exist_ok=True)
os.makedirs(TXT_OUTPUT_DIR, exist_ok=True)


def convert_mp3_to_wav(mp3_path, wav_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    command = ["ffmpeg", "-i", mp3_path, "-ar", "16000", "-ac", "1", "-c:a", "pcm_s16le", wav_path]

    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    for line in process.stderr:
        print("FFmpeg:", line.strip())

    process.wait()

    if process.returncode != 0:
        print(f"‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {mp3_path}")
        return False
    return os.path.exists(wav_path)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
for filename in os.listdir(MP3_INPUT_DIR):
    mp3_path = os.path.join(MP3_INPUT_DIR, filename)

    if filename.endswith(".mp3"):  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV
        wav_filename = filename.replace(".mp3", ".wav")
        wav_path = os.path.join(WAV_OUTPUT_DIR, wav_filename)

        # if not convert_mp3_to_wav(mp3_path, wav_path):
        #     print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {filename}")
        #     continue

    if filename.endswith(".wav"):  # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ WAV
        wav_path = os.path.join(WAV_OUTPUT_DIR, filename)
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {wav_path}")

        try:
            print(f"üîÑ –û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª: {wav_path}")
            with wave.open(wav_path, "rb") as wf:
                print(f"‚úÖ –§–∞–π–ª {wav_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!")
                if wf.getnchannels() != 1:
                    raise ValueError(f"‚ùå {filename} –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ 1 –∫–∞–Ω–∞–ª–∞! –ù—É–∂–Ω–æ –º–æ–Ω–æ-–∞—É–¥–∏–æ.")

                recognizer = KaldiRecognizer(model, wf.getframerate())
                text = ""

                while True:
                    data = wf.readframes(4000)
                    if not data:
                        break
                    if recognizer.AcceptWaveform(data):
                        result = json.loads(recognizer.Result())
                        text += result.get("text", "") + " "

                text = text.strip()
                print(f"üìå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è {filename}: {text}")

                if not text:
                    print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –§–∞–π–ª {filename} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                    continue

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
                txt_output_path = os.path.join(TXT_OUTPUT_DIR, filename.replace(".wav", ".txt"))
                with open(txt_output_path, "w", encoding="utf-8") as f:
                    f.write(text)

                print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {txt_output_path}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")

print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
